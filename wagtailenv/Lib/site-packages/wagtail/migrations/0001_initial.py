# Generated by Django 5.2.4 on 2025-07-17 11:23

import django.core.serializers.json
import django.db.models.deletion
import modelcluster.fields
import uuid
import wagtail.models.content_types
import wagtail.models.preview
import wagtail.models.specific
import wagtail.models.workflows
import wagtail.search.index
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(max_length=255, unique=True)),
                ('depth', models.PositiveIntegerField()),
                ('numchild', models.PositiveIntegerField(default=0)),
                ('name', models.CharField(max_length=255, verbose_name='name')),
            ],
            options={
                'verbose_name': 'collection',
                'verbose_name_plural': 'collections',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('active', models.BooleanField(default=True, help_text='Active tasks can be added to workflows. Deactivating a task does not remove it from existing workflows.', verbose_name='active')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wagtail_tasks', to='contenttypes.contenttype', verbose_name='content type')),
            ],
            options={
                'verbose_name': 'task',
                'verbose_name_plural': 'tasks',
            },
            bases=(wagtail.models.specific.SpecificMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Locale',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'ordering': ['language_code'],
            },
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(max_length=255, unique=True)),
                ('depth', models.PositiveIntegerField()),
                ('numchild', models.PositiveIntegerField(default=0)),
                ('translation_key', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('live', models.BooleanField(default=True, editable=False, verbose_name='live')),
                ('has_unpublished_changes', models.BooleanField(default=False, editable=False, verbose_name='has unpublished changes')),
                ('first_published_at', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='first published at')),
                ('last_published_at', models.DateTimeField(editable=False, null=True, verbose_name='last published at')),
                ('go_live_at', models.DateTimeField(blank=True, null=True, verbose_name='go live date/time')),
                ('expire_at', models.DateTimeField(blank=True, null=True, verbose_name='expiry date/time')),
                ('expired', models.BooleanField(default=False, editable=False, verbose_name='expired')),
                ('locked', models.BooleanField(default=False, editable=False, verbose_name='locked')),
                ('locked_at', models.DateTimeField(editable=False, null=True, verbose_name='locked at')),
                ('title', models.CharField(help_text="The page title as you'd like it to be seen by the public", max_length=255, verbose_name='title')),
                ('draft_title', models.CharField(editable=False, max_length=255)),
                ('slug', models.SlugField(allow_unicode=True, help_text='The name of the page as it will appear in URLs e.g http://domain.com/blog/[my-slug]/', max_length=255, verbose_name='slug')),
                ('url_path', models.TextField(blank=True, editable=False, verbose_name='URL path')),
                ('seo_title', models.CharField(blank=True, help_text='The name of the page displayed on search engine results as the clickable headline.', max_length=255, verbose_name='title tag')),
                ('show_in_menus', models.BooleanField(default=False, help_text='Whether a link to this page will appear in automatically generated menus', verbose_name='show in menus')),
                ('search_description', models.TextField(blank=True, help_text='The descriptive text displayed underneath a headline in search engine results.', verbose_name='meta description')),
                ('latest_revision_created_at', models.DateTimeField(editable=False, null=True, verbose_name='latest revision created at')),
                ('alias_of', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='aliases', to='wagtailcore.page')),
                ('content_type', models.ForeignKey(on_delete=models.SET(wagtail.models.content_types.get_default_page_content_type), related_name='pages', to='contenttypes.contenttype', verbose_name='content type')),
                ('locale', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='wagtailcore.locale', verbose_name='locale')),
                ('locked_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locked_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='locked by')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owned_pages', to=settings.AUTH_USER_MODEL, verbose_name='owner')),
            ],
            options={
                'verbose_name': 'page',
                'verbose_name_plural': 'pages',
                'permissions': [('bulk_delete_page', 'Delete pages with children'), ('lock_page', "Lock/unlock pages you've locked"), ('publish_page', 'Publish any page'), ('unlock_page', 'Unlock any page')],
            },
            bases=(wagtail.models.workflows.WorkflowMixin, wagtail.models.preview.PreviewableMixin, wagtail.models.specific.SpecificMixin, wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='Workflow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('active', models.BooleanField(default=True, help_text='Active workflows can be added to pages/snippets. Deactivating a workflow does not remove it from existing pages/snippets.', verbose_name='active')),
            ],
            options={
                'verbose_name': 'workflow',
                'verbose_name_plural': 'workflows',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CollectionViewRestriction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('restriction_type', models.CharField(choices=[('none', 'Public'), ('password', 'Private, accessible with a shared password'), ('login', 'Private, accessible to any logged-in users'), ('groups', 'Private, accessible to users in specific groups')], max_length=20)),
                ('password', models.CharField(blank=True, help_text='Shared passwords should not be used to protect sensitive content. Anyone who has this password will be able to view the content.', max_length=255, verbose_name='shared password')),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='view_restrictions', to='wagtailcore.collection', verbose_name='collection')),
                ('groups', models.ManyToManyField(blank=True, to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'collection view restriction',
                'verbose_name_plural': 'collection view restrictions',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('contentpath', models.TextField()),
                ('position', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comments_resolved', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wagtail_admin_comments', to=settings.AUTH_USER_MODEL)),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='wagtail_admin_comments', to='wagtailcore.page')),
            ],
            options={
                'verbose_name': 'comment',
                'verbose_name_plural': 'comments',
            },
        ),
        migrations.CreateModel(
            name='CommentReply',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('comment', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='wagtailcore.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment_replies', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'comment reply',
                'verbose_name_plural': 'comment replies',
            },
        ),
        migrations.CreateModel(
            name='PageViewRestriction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('restriction_type', models.CharField(choices=[('none', 'Public'), ('password', 'Private, accessible with a shared password'), ('login', 'Private, accessible to any logged-in users'), ('groups', 'Private, accessible to users in specific groups')], max_length=20)),
                ('password', models.CharField(blank=True, help_text='Shared passwords should not be used to protect sensitive content. Anyone who has this password will be able to view the content.', max_length=255, verbose_name='shared password')),
                ('groups', models.ManyToManyField(blank=True, to='auth.group', verbose_name='groups')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='view_restrictions', to='wagtailcore.page', verbose_name='page')),
            ],
            options={
                'verbose_name': 'page view restriction',
                'verbose_name_plural': 'page view restrictions',
            },
        ),
        migrations.CreateModel(
            name='Revision',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.CharField(max_length=255, verbose_name='object id')),
                ('created_at', models.DateTimeField(db_index=True, verbose_name='created at')),
                ('object_str', models.TextField(default='')),
                ('content', models.JSONField(encoder=django.core.serializers.json.DjangoJSONEncoder, verbose_name='content JSON')),
                ('approved_go_live_at', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='approved go live at')),
                ('base_content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='contenttypes.contenttype')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='contenttypes.contenttype')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='wagtail_revisions', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'revision',
                'verbose_name_plural': 'revisions',
            },
        ),
        migrations.CreateModel(
            name='PageLogEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.TextField()),
                ('action', models.CharField(blank=True, db_index=True, max_length=255)),
                ('data', models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('timestamp', models.DateTimeField(db_index=True, verbose_name='timestamp (UTC)')),
                ('uuid', models.UUIDField(blank=True, editable=False, help_text='Log entries that happened as part of the same user action are assigned the same UUID', null=True)),
                ('content_changed', models.BooleanField(db_index=True, default=False)),
                ('deleted', models.BooleanField(default=False)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='contenttypes.contenttype', verbose_name='content type')),
                ('page', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='wagtailcore.page')),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('revision', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='wagtailcore.revision')),
            ],
            options={
                'verbose_name': 'page log entry',
                'verbose_name_plural': 'page log entries',
                'ordering': ['-timestamp', '-id'],
            },
        ),
        migrations.AddField(
            model_name='page',
            name='latest_revision',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.revision', verbose_name='latest revision'),
        ),
        migrations.AddField(
            model_name='page',
            name='live_revision',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.revision', verbose_name='live revision'),
        ),
        migrations.CreateModel(
            name='ModelLogEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.TextField()),
                ('action', models.CharField(blank=True, db_index=True, max_length=255)),
                ('data', models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('timestamp', models.DateTimeField(db_index=True, verbose_name='timestamp (UTC)')),
                ('uuid', models.UUIDField(blank=True, editable=False, help_text='Log entries that happened as part of the same user action are assigned the same UUID', null=True)),
                ('content_changed', models.BooleanField(db_index=True, default=False)),
                ('deleted', models.BooleanField(default=False)),
                ('object_id', models.CharField(db_index=True, max_length=255)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='contenttypes.contenttype', verbose_name='content type')),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('revision', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='wagtailcore.revision')),
            ],
            options={
                'verbose_name': 'model log entry',
                'verbose_name_plural': 'model log entries',
                'ordering': ['-timestamp', '-id'],
            },
        ),
        migrations.AddField(
            model_name='comment',
            name='revision_created',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_comments', to='wagtailcore.revision'),
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hostname', models.CharField(db_index=True, max_length=255, verbose_name='hostname')),
                ('port', models.IntegerField(default=80, help_text='Set this to something other than 80 if you need a specific port number to appear in URLs (e.g. development on port 8000). Does not affect request handling (so port forwarding still works).', verbose_name='port')),
                ('site_name', models.CharField(blank=True, help_text='Human-readable name for the site.', max_length=255, verbose_name='site name')),
                ('is_default_site', models.BooleanField(default=False, help_text='If true, this site will handle requests for all other hostnames that do not have a site entry of their own', verbose_name='is default site')),
                ('root_page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sites_rooted_here', to='wagtailcore.page', verbose_name='root page')),
            ],
            options={
                'verbose_name': 'site',
                'verbose_name_plural': 'sites',
            },
        ),
        migrations.CreateModel(
            name='TaskState',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('in_progress', 'In progress'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('skipped', 'Skipped'), ('cancelled', 'Cancelled')], default='in_progress', max_length=50, verbose_name='status')),
                ('started_at', models.DateTimeField(auto_now_add=True, verbose_name='started at')),
                ('finished_at', models.DateTimeField(blank=True, null=True, verbose_name='finished at')),
                ('comment', models.TextField(blank=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wagtail_task_states', to='contenttypes.contenttype', verbose_name='content type')),
                ('finished_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='finished_task_states', to=settings.AUTH_USER_MODEL, verbose_name='finished by')),
                ('revision', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_states', to='wagtailcore.revision', verbose_name='revision')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_states', to='wagtailcore.task', verbose_name='task')),
            ],
            options={
                'verbose_name': 'Task state',
                'verbose_name_plural': 'Task states',
            },
            bases=(wagtail.models.specific.SpecificMixin, models.Model),
        ),
        migrations.CreateModel(
            name='UploadedFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(max_length=200, upload_to='wagtail_uploads')),
                ('for_content_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='uploads', to='contenttypes.contenttype', verbose_name='for content type')),
                ('uploaded_by_user', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='uploaded by user')),
            ],
        ),
        migrations.CreateModel(
            name='WorkflowContentType',
            fields=[
                ('content_type', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='wagtail_workflow_content_type', serialize=False, to='contenttypes.contenttype', verbose_name='content type')),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workflow_content_types', to='wagtailcore.workflow', verbose_name='workflow')),
            ],
        ),
        migrations.CreateModel(
            name='WorkflowState',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.CharField(max_length=255, verbose_name='object id')),
                ('status', models.CharField(choices=[('in_progress', 'In progress'), ('approved', 'Approved'), ('needs_changes', 'Needs changes'), ('cancelled', 'Cancelled')], default='in_progress', max_length=50, verbose_name='status')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('base_content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='contenttypes.contenttype')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='contenttypes.contenttype')),
                ('current_task_state', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='wagtailcore.taskstate', verbose_name='current task state')),
                ('requested_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='requested_workflows', to=settings.AUTH_USER_MODEL, verbose_name='requested by')),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workflow_states', to='wagtailcore.workflow', verbose_name='workflow')),
            ],
            options={
                'verbose_name': 'Workflow state',
                'verbose_name_plural': 'Workflow states',
            },
        ),
        migrations.AddField(
            model_name='taskstate',
            name='workflow_state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_states', to='wagtailcore.workflowstate', verbose_name='workflow state'),
        ),
        migrations.CreateModel(
            name='WorkflowTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('task', models.ForeignKey(limit_choices_to={'active': True}, on_delete=django.db.models.deletion.CASCADE, related_name='workflow_tasks', to='wagtailcore.task', verbose_name='task')),
                ('workflow', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='workflow_tasks', to='wagtailcore.workflow', verbose_name='workflow_tasks')),
            ],
            options={
                'verbose_name': 'workflow task order',
                'verbose_name_plural': 'workflow task orders',
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GroupApprovalTask',
            fields=[
                ('task_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.task')),
                ('groups', models.ManyToManyField(help_text='Pages/snippets at this step in a workflow will be moderated or approved by these groups of users', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'Group approval task',
                'verbose_name_plural': 'Group approval tasks',
                'abstract': False,
            },
            bases=('wagtailcore.task',),
        ),
        migrations.CreateModel(
            name='GroupCollectionPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_permissions', to='wagtailcore.collection', verbose_name='collection')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collection_permissions', to='auth.group', verbose_name='group')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.permission', verbose_name='permission')),
            ],
            options={
                'verbose_name': 'group collection permission',
                'verbose_name_plural': 'group collection permissions',
                'unique_together': {('group', 'collection', 'permission')},
            },
        ),
        migrations.CreateModel(
            name='WorkflowPage',
            fields=[
                ('page', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='wagtailcore.page', verbose_name='page')),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workflow_pages', to='wagtailcore.workflow', verbose_name='workflow')),
            ],
            options={
                'verbose_name': 'workflow page',
                'verbose_name_plural': 'workflow pages',
            },
        ),
        migrations.CreateModel(
            name='GroupPagePermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='page_permissions', to='auth.group', verbose_name='group')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.permission', verbose_name='permission')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_permissions', to='wagtailcore.page', verbose_name='page')),
            ],
            options={
                'verbose_name': 'group page permission',
                'verbose_name_plural': 'group page permissions',
                'constraints': [models.UniqueConstraint(fields=('group', 'page', 'permission'), name='unique_permission')],
            },
        ),
        migrations.CreateModel(
            name='PageSubscription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment_notifications', models.BooleanField()),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscribers', to='wagtailcore.page')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='page_subscriptions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('page', 'user')},
            },
        ),
        migrations.CreateModel(
            name='ReferenceIndex',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.CharField(max_length=255, verbose_name='object id')),
                ('to_object_id', models.CharField(max_length=255, verbose_name='object id')),
                ('model_path', models.TextField()),
                ('content_path', models.TextField()),
                ('content_path_hash', models.UUIDField()),
                ('base_content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='contenttypes.contenttype')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='contenttypes.contenttype')),
                ('to_content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='contenttypes.contenttype')),
            ],
            options={
                'unique_together': {('base_content_type', 'object_id', 'to_content_type', 'to_object_id', 'content_path_hash')},
            },
        ),
        migrations.AddIndex(
            model_name='revision',
            index=models.Index(fields=['content_type', 'object_id'], name='content_object_idx'),
        ),
        migrations.AddIndex(
            model_name='revision',
            index=models.Index(fields=['base_content_type', 'object_id'], name='base_content_object_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='page',
            unique_together={('translation_key', 'locale')},
        ),
        migrations.AlterUniqueTogether(
            name='site',
            unique_together={('hostname', 'port')},
        ),
        migrations.AddIndex(
            model_name='workflowstate',
            index=models.Index(fields=['content_type', 'object_id'], name='workflowstate_ct_id_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowstate',
            index=models.Index(fields=['base_content_type', 'object_id'], name='workflowstate_base_ct_id_idx'),
        ),
        migrations.AddConstraint(
            model_name='workflowstate',
            constraint=models.UniqueConstraint(condition=models.Q(('status__in', ('in_progress', 'needs_changes'))), fields=('base_content_type', 'object_id'), name='unique_in_progress_workflow'),
        ),
        migrations.AlterUniqueTogether(
            name='workflowtask',
            unique_together={('workflow', 'task')},
        ),
    ]
