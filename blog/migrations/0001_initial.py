# Generated by Django 5.2.4 on 2025-07-17 11:23

import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.contrib.routable_page.models
import wagtail.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0001_initial'),
        ('wagtailcore', '0001_initial'),
        ('wagtailimages', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BlogDetailsPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('blog_title', models.CharField(help_text='Overwrites the default title', max_length=100)),
                ('content', wagtail.fields.StreamField([('text_and_title', 2), ('rich_text', 3), ('simple_text', 4), ('card_blocks', 12), ('cta_blocks', 17)], blank=True, block_lookup={0: ('wagtail.blocks.CharBlock', (), {'help_text': 'Add a title', 'required': True}), 1: ('wagtail.blocks.TextBlock', (), {'help_text': 'Add some text', 'required': True}), 2: ('wagtail.blocks.StructBlock', [[('title', 0), ('text', 1)]], {}), 3: ('stream.blocks.RichTextBlocks', (), {}), 4: ('stream.blocks.SimpleRichTextBlocks', (), {}), 5: ('wagtail.images.blocks.ImageChooserBlock', (), {'required': True}), 6: ('wagtail.blocks.CharBlock', (), {'required': True}), 7: ('wagtail.blocks.TextBlock', (), {'required': True}), 8: ('wagtail.blocks.PageChooserBlock', (), {'required': False}), 9: ('wagtail.blocks.URLBlock', (), {'help_text': 'Add a link if needed', 'required': False}), 10: ('wagtail.blocks.StructBlock', [[('image', 5), ('title', 6), ('text', 7), ('button_page', 8), ('button_url', 9)]], {}), 11: ('wagtail.blocks.ListBlock', (10,), {}), 12: ('wagtail.blocks.StructBlock', [[('title', 0), ('card', 11)]], {}), 13: ('wagtail.blocks.RichTextBlock', (), {'max_length': 60, 'null': True, 'required': True}), 14: ('wagtail.blocks.TextBlock', (), {'max_length': 260, 'null': True, 'required': True}), 15: ('wagtail.blocks.PageChooserBlock', (), {'help_text': 'Add a link if needed', 'required': False}), 16: ('wagtail.blocks.CharBlock', (), {'default': 'Read More', 'required': False}), 17: ('wagtail.blocks.StructBlock', [[('title', 13), ('text', 14), ('button_page', 15), ('button_url', 9), ('button_text', 16)]], {})}, null=True)),
                ('blog_image', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BlogCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(allow_unicode=True, help_text='A slug to identify posts by this category', max_length=255, verbose_name='slug')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='BlogListingPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('custom_title', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.contrib.routable_page.models.RoutablePageMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='ArticleBlogPage',
            fields=[
                ('blogdetailspage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='blog.blogdetailspage')),
                ('custom_title', models.CharField(blank=True, max_length=100, null=True)),
                ('subtitle', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'verbose_name': 'Article BLog Page',
                'verbose_name_plural': 'Articles Blog Page',
            },
            bases=('blog.blogdetailspage',),
        ),
        migrations.CreateModel(
            name='VideoBlogPage',
            fields=[
                ('blogdetailspage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='blog.blogdetailspage')),
                ('youtube_video_id', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'verbose_name': 'Video BLog Page',
                'verbose_name_plural': 'Videos Blog Page',
            },
            bases=('blog.blogdetailspage',),
        ),
        migrations.CreateModel(
            name='BlogAuthor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author_name', models.CharField(max_length=100)),
                ('author_website', models.URLField(blank=True)),
                ('author_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='wagtailimages.image')),
            ],
            options={
                'verbose_name': 'Author',
                'verbose_name_plural': 'Authors',
            },
        ),
        migrations.CreateModel(
            name='AuthorTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='author_tags', to='blog.blogdetailspage')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blog.blogauthor')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='blogdetailspage',
            name='categories',
            field=modelcluster.fields.ParentalManyToManyField(blank=True, to='blog.blogcategory'),
        ),
        migrations.CreateModel(
            name='BlogPostTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='blog.blogdetailspage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='blogdetailspage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='blog.BlogPostTag', to='taggit.Tag', verbose_name='Tags'),
        ),
    ]
